structure A = Absyn

%%
%term
    EOF
  | ID of string | INT of int | STRING of string  | BOOL of bool | NIL
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | AND | OR | ASSIGN
  | IF | ELSE | WHILE | BREAK | FUNCTION | VAR | TYPE

%nonterm
  program of A.dec list
  | decs of A.dec list
  | dec of A.dec
  | tydec of {name: A.symbol, typ: A.ty, pos: A.pos}
  | ty of A.ty
  | tyfields of A.ty list
  | funformals of A.field list
  | vardec of {name: A.symbol, init: A.exp, pos: A.pos}
  | funcall of A.exp
  | inputs of A.exp list
  | operation of A.exp
  | lvalue of A.var
  | tupleexp of {fields: A.exp list, typ: A.symbol, pos: A.pos}
  | fundec of {name: A.symbol, params: A.field list, result: A.symbol, body: A.exp, pos: A.pos}
  | exp of A.exp
  | expseq of A.exp
  | expseq2 of A.exp list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Molson

%keyword WHILE BREAK FUNCTION VAR TYPE IF ELSE

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc ID LBRACE ASSIGN
%left OR AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%

program	: decs (decs)

decs : dec decs (dec::decs)
     | ([])

dec : tydec (A.TypeDec(tydec))
    | vardec (A.VarDec(vardec))
    | fundec (A.FunctionDec(fundec))

tydec : TYPE ID ASSIGN ty ({name=ID, typ=ty, pos=TYPEleft})

ty : ID (A.NameTy(ID, IDleft))
   | LBRACE tyfields RBRACE (A.TupleTy(tyfields))
   | LBRACE RBRACE (A.TupleTy([]))

tyfields : ty COMMA tyfields (ty::tyfields)
         | ty ([ty])

funformals : ID COLON ID ([(ID1,ID2,ID1left)])
           | ID COLON ID COMMA funformals ((ID1,ID2,ID1left)::funformals)

vardec : VAR ID ASSIGN exp ({name=ID,init=exp,pos=VARleft})

funcall : ID LPAREN inputs RPAREN (A.CallExp({func=ID,args=inputs,pos=IDleft}))
        | ID LPAREN RPAREN (A.CallExp({func=ID,args=[],pos=IDleft}))

inputs : exp COMMA inputs (exp::inputs)
       | exp ([exp])

operation : exp PLUS exp (A.OpExp({left=exp1,oper=A.PlusOp,right=exp2,pos=exp1left}))
          | exp MINUS exp (A.OpExp({left=exp1,oper=A.MinusOp,right=exp2,pos=exp1left}))
          | exp TIMES exp (A.OpExp({left=exp1,oper=A.TimesOp,right=exp2,pos=exp1left}))
          | exp DIVIDE exp (A.OpExp({left=exp1,oper=A.DivideOp,right=exp2,pos=exp1left}))
          | MINUS exp %prec UMINUS (A.OpExp({left=A.IntExp(0),oper=A.MinusOp,right=exp,pos=expleft}))
          | exp GE exp (A.OpExp({left=exp1,oper=A.GeOp,right=exp2,pos=exp1left}))
          | exp GT exp (A.OpExp({left=exp1,oper=A.GtOp,right=exp2,pos=exp1left}))
          | exp LE exp (A.OpExp({left=exp1,oper=A.LeOp,right=exp2,pos=exp1left}))
          | exp LT exp (A.OpExp({left=exp1,oper=A.LtOp,right=exp2,pos=exp1left}))
          | exp NEQ exp (A.OpExp({left=exp1,oper=A.NeqOp,right=exp2,pos=exp1left}))
          | exp EQ exp (A.OpExp({left=exp1,oper=A.EqOp,right=exp2,pos=exp1left}))
          | exp OR exp (A.OpExp({left=exp1,oper=A.OrOp,right=exp2,pos=exp1left}))
          | exp AND exp (A.OpExp({left=exp1,oper=A.AndOp,right=exp2,pos=exp1left}))

lvalue : ID (A.SimpleVar(ID,IDleft))
       | lvalue DOT INT (A.FieldVar(lvalue,INT,lvalueleft))

tupleexp : ID LBRACE RBRACE ({fields=[],typ=ID,pos=IDleft})
         | ID LBRACE inputs RBRACE ({fields=inputs,typ=ID,pos=IDleft})

fundec : FUNCTION ID LPAREN RPAREN COLON ID LBRACE exp RBRACE ({name=ID1,params=[],result=ID2,body=exp,pos=FUNCTIONleft})
       | FUNCTION ID LPAREN funformals RPAREN COLON ID LBRACE exp RBRACE ({name=ID1,params=funformals,result=ID2,body=exp,pos=FUNCTIONleft})

exp : IF LPAREN exp RPAREN LBRACE exp RBRACE ELSE LBRACE exp RBRACE (A.IfElseExp({cond=exp, exp1=exp1, exp2=exp2, pos=IFleft}))
    | WHILE LPAREN exp RPAREN LBRACE exp RBRACE (A.WhileExp({cond=exp, body=exp, pos=WHILEleft}))
    | lvalue ASSIGN exp (A.AssignExp({var=lvalue,exp=exp,pos=lvalueleft}))
    | BREAK (A.BreakExp(BREAKleft))
    | LPAREN expseq RPAREN (expseq)
    | NIL (A.NilExp)
    | INT (A.IntExp(INT))
    | STRING (A.StringExp(STRING))
    | BOOL (A.BoolExp(BOOL))
    | funcall (funcall)
    | operation (operation)
    | lvalue (A.VarExp(lvalue))
    | tupleexp (A.TupleExp(tupleexp))

expseq : exp expseq2 (A.SeqExp(exp::expseq2))
       | exp (exp)
       | (A.NilExp)

expseq2 : SEMICOLON exp (exp::[])
        | SEMICOLON exp expseq2 (exp::expseq2)
